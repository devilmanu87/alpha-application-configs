# Oauth client configuration specifics
config:
  configFile: |-
    email_domains = [ "*" ]
    upstreams = [ "file:///dev/null" ]

image:
  repository: "agrid06p1hubacr001.azurecr.io/obs-logging/quay.io/oauth2-proxy/oauth2-proxy"
  tag: "v7.2.0"
  pullPolicy: "IfNotPresent"

extraArgs:
  provider: "azure"
  azure-tenant: "f7d9f3f1-3841-4bfc-9cd4-c0e1964b5f86"
  scope: "openid"
  email-domain: "*"
  login-url: "https://login.microsoftonline.com/f7d9f3f1-3841-4bfc-9cd4-c0e1964b5f86/oauth2/authorize"
  redeem-url: "https://login.microsoftonline.com/f7d9f3f1-3841-4bfc-9cd4-c0e1964b5f86/oauth2/token"
  profile-url: "https://graph.microsoft.com/v1.0/me"
  resource: "https://graph.microsoft.com"
  redirect-url: "https://agrid-06-p1-obs.ops.crd.com/oauth2/callback"
  ssl-insecure-skip-verify: true
  session-cookie-minimal: true
extraEnv: 

service:
  type: ClusterIP
  portNumber: 4180
  annotations: {}

## Create or use ServiceAccount
serviceAccount:
  ## Specifies whether a ServiceAccount should be created
  enabled: true
  ## The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the fullname template
  name:
  annotations: {}

ingress:
  enabled: true
  className: nginx
  #annotations:
  #  kubernetes.io/ingress.class: obs-nginx-ingress
  path: /oauth2
  # Only used if API capabilities (networking.k8s.io/v1) allow it
  pathType: ImplementationSpecific
  # Used to create an Ingress record.
  hosts:
    - agrid-06-p1-obs.ops.crd.com

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 300Mi
  # requests:
  #   cpu: 100m
  #   memory: 300Mi

extraVolumes: []
  # - name: ca-bundle-cert
  #   secret:
  #     secretName: <secret-name>

extraVolumeMounts: []
  # - mountPath: /etc/ssl/certs/
  #   name: ca-bundle-cert

priorityClassName: ""

# Affinity for pod assignment
# Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity:
  nodeAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - preference:
        matchExpressions:
        - key: app
          operator: In
          values:
          - general
      weight: 100

# Tolerations for pod assignment
# Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations:
  - key: "sku"
    operator: "Equal"
    value: "general"
    effect: "NoSchedule"

# Node labels for pod assignment
# Ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

# Whether to use secrets instead of environment values for setting up OAUTH2_PROXY variables
proxyVarsAsSecrets: true

# Configure Kubernetes liveness and readiness probes.
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
# Disable both when deploying with Istio 1.0 mTLS. https://istio.io/help/faq/security/#k8s-health-checks
livenessProbe:
  enabled: true
  initialDelaySeconds: 0
  timeoutSeconds: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 0
  timeoutSeconds: 1
  periodSeconds: 10
  successThreshold: 1

# Configure Kubernetes security context for container
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
securityContext:
  enabled: false
  runAsNonRoot: true

podAnnotations: {}
podLabels: {}
replicaCount: 1

## PodDisruptionBudget settings
## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Configure Kubernetes security context for pod
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
podSecurityContext: {}

# whether to use http or https
httpScheme: http

# Additionally authenticate against a htpasswd file. Entries must be created with "htpasswd -s" for SHA encryption.
# Alternatively supply an existing secret which contains the required information.
htpasswdFile:
  enabled: false
  existingSecret: ""
  entries: {}
  # One row for each user
  # example:
  # entries:
  #  - testuser:{SHA}EWhzdhgoYJWy0z2gyzhRYlN9DSiv

# Configure the session storage type, between cookie and redis
sessionStorage:
  # Can be one of the supported session storage cookie/redis
  type: cookie
  redis:
    # Secret name that holds the redis-password and redis-sentinel-password values
    existingSecret: ""
    password: ""
    # Can be one of sentinel/cluster/standalone
    clientType: "standalone"
    standalone:
      # If empty and sessionStorage type is redis, will automatically be generated.
      connectionUrl: ""
    cluster:
      # connectionUrls: ["redis://127.0.0.1:8000", "redis://127.0.0.1:8000"]
      connectionUrls: []
    sentinel:
      password: ""
      masterName: ""
      # connectionUrls: ["redis://127.0.0.1:8000", "redis://127.0.0.1:8000"]
      connectionUrls: []

# Enables and configure the automatic deployment of the redis subchart
redis:
  # provision an instance of the redis sub-chart
  enabled: false
  # Redis specific helm chart settings, please see:
  # https://github.com/bitnami/charts/tree/master/bitnami/redis#parameters
  # redisPort: 6379
  # cluster:
  #   enabled: false
  #   slaveCount: 1

# Enables apiVersion deprecation checks
checkDeprecation: true

metrics:
  # Enable Prometheus metrics endpoint
  enabled: true
